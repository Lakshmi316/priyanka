import numpy as np
from keras.preprocessing import image

from tkinter import *
from PIL import ImageTk, Image
from tkinter import filedialog
import os
from keras.models import load_model
classifier = load_model('face.h5')
classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])
root = Tk()
root.geometry("550x300+300+150")
root.resizable(width=True, height=True)

def openfn():
    filename = filedialog.askopenfilename(title='open')
    return filename
def open_img():
    x = openfn()
    test_image = image.load_img(x, target_size = (64, 64))
    test_image = image.img_to_array(test_image)
    test_image = np.expand_dims(test_image, axis = 0)
    result = classifier.predict_classes(test_image)
    print(result)
    index=['kavi', 'lakshmi']
    label = Label( root, text="Prediction : "+index[result[0]])
    label.pack()
    img = Image.open(x)
    img = img.resize((250,250), Image.ANTIALIAS)
    img = ImageTk.PhotoImage(img)
    panel = Label(root, image=img)
    panel.image = img
    panel.pack()
   
        
        
        
        
    
btn = Button(root, text='open image', command=open_img).pack()

root.mainloop()




//module 2




#import required libraries
from keras.models import Sequential

from keras.layers import Dense
from keras.layers import Conv2D
from keras.layers import MaxPooling2D

cnn_model=Sequential()

cnn_model.add(Conv2D(32,3,3,input_shape=(64,64,3),activation="relu"))

cnn_model.add(MaxPooling2D(pool_size=(2,2)))

cnn_model.add(Flatten())


cnn_model.add(Dense(init="random_uniform",activation="relu",output_dim=120))


cnn_model.compile(optimizer="adam",loss="categorical_crossentropy",metrics=['accuracy'])

from keras.preprocessing.image import ImageDataGenerator 
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

x_train= train_datagen.flow_from_directory(
                r'C:\Users\DELL\Desktop\project\train',
                 target_size=(64,64),
                batch_size=32,
                class_mode='categorical')


x_train.class_indices

{'kavi': 0, 'lakshmi': 1}

cnn_model.fit_generator(
        x_train,
        steps_per_epoch=3,
        epochs=5,
        validation_data=x_test,
        validation_steps=10)

cnn_model.save("face.h5")




from keras.layers import Flatten
